; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

; MessageBox() Flags

#define MB_OK                       0x00000000L
#define MB_OKCANCEL                 0x00000001L
#define MB_ABORTRETRYIGNORE         0x00000002L
#define MB_YESNOCANCEL              0x00000003L
#define MB_YESNO                    0x00000004L
#define MB_RETRYCANCEL              0x00000005L

#define MB_CANCELTRYCONTINUE        0x00000006L

#define MB_ICONHAND                 0x00000010L
#define MB_ICONQUESTION             0x00000020L
#define MB_ICONEXCLAMATION          0x00000030L
#define MB_ICONASTERISK             0x00000040L

#define MB_USERICON                 0x00000080L
#define MB_ICONWARNING              MB_ICONEXCLAMATION
#define MB_ICONERROR                MB_ICONHAND

#define MB_ICONINFORMATION          MB_ICONASTERISK
#define MB_ICONSTOP                 MB_ICONHAND
#define MB_DEFBUTTON1               0x00000000L
#define MB_DEFBUTTON2               0x00000100L
#define MB_DEFBUTTON3               0x00000200L

#define MB_DEFBUTTON4               0x00000300L

#define MB_APPLMODAL                0x00000000L
#define MB_SYSTEMMODAL              0x00001000L
#define MB_TASKMODAL                0x00002000L

#define MB_HELP                     0x00004000L 

#define MB_NOFOCUS                  0x00008000L
#define MB_SETFOREGROUND            0x00010000L
#define MB_DEFAULT_DESKTOP_ONLY     0x00020000L 

#define MB_TOPMOST                  0x00040000L
#define MB_RIGHT                    0x00080000L
#define MB_RTLREADING               0x00100000L 
; ===========================================================================
#define RegAppName "SurfSafe"

#define MyAppVersion "1.10.10.102"

#define AppGUID "{64C6926B-67EB-46EA-B04B-CCA9B90519E5}"
#define Architecture "x86"

#define Manufacturer "DefenderPro"
#define ShowAppName "SurfSafe"
#define MyAppExeName "SurfSafe.exe"

#define ChoicesFile "choices.json"


#define SSDisplayNameService "Surf Safe Service"
#define SSService "SurfSafeService"
#define SSExeName "SurfSafeService.exe"


#define WorkingFolder "data"
#define RegKeysPath "https://keys.getsurfsafe.org/"
; ===========================================================================

#define FILERTF_WELCOMELABEL1 "RTF_WELCOMELABEL1.rtf"
#define FILERTF_WELCOMELABEL2 "RTF_WELCOMELABEL2.rtf"
#define FILERTF_FINISHPAGE1 "RTF_FINISHPAGE1.rtf"
#define FILERTF_PAGEOPTIONSLABEL "RTF_PAGEOPTIONSLABEL.rtf"
#define FILERTF_LICENSEMEMO "license.rtf"

#define FINAL_CLEANING_APP_FOLDER "Temp\SurfSafeSetupHelper\"


; ===========================================================================
[Setup]
; NOTE: The value of AppId uniquely identifies this application. Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)

AppId={{#AppGUID}
AppName={#RegAppName}
AppVersion={#MyAppVersion}
UsePreviousAppDir=false

AppPublisher={#Manufacturer}
DefaultDirName={autopf}\{#RegAppName}
DisableWelcomePage=no
DisableProgramGroupPage=yes
DisableDirPage=yes
DisableReadyPage=yes
LicenseFile=.\rtf\license.rtf

PrivilegesRequired=lowest

;ArchitecturesAllowed=x64compatible
;ArchitecturesInstallIn64BitMode=x64compatible


OutputBaseFilename="SurfSafeSetup-{#MyAppVersion}"
SetupIconFile=.\images\surfsafe.ico
Uninstallable=True
;Compression=lzma2/max
;SolidCompression=yes
WizardStyle=modern
DefaultDialogFontName = Arial
UninstallDisplayIcon={app}\{#MyAppExeName}
SetupLogging = yes

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[LangOptions]
DialogFontSize = 10
WelcomeFontName=Arial
WelcomeFontSize=14


[Icons]
Name: "{autodesktop}\{#RegAppName}"; Filename: "{app}\{#MyAppExeName}"

; [Dirs]
; Name: "{commonappdata}\{#WorkingFolder}";  Permissions: users-modify;

[Files]
Source: ".\Imports\ColorButtonDLL.dll"; DestDir: "{app}\cbd"
Source: ".\Imports\SurfSafeHelper.exe"; DestDir: "{localappdata}\Temp\SurfSafeHelper"
Source: ".\SetupFiles\SSPBins\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs

//Source: ".\Imports\UninsIS.dll"; Flags: dontcopy

Source: ".\rtf\{#FILERTF_WELCOMELABEL1}"; DestDir: "{tmp}"; Flags: dontcopy
Source: ".\rtf\{#FILERTF_WELCOMELABEL2}"; DestDir: "{tmp}"; Flags: dontcopy
Source: ".\rtf\{#FILERTF_FINISHPAGE1}"; DestDir: "{tmp}"; Flags: dontcopy
Source: ".\rtf\{#FILERTF_PAGEOPTIONSLABEL}"; DestDir: "{tmp}"; Flags: dontcopy
Source: ".\rtf\{#FILERTF_LICENSEMEMO}"; DestDir: "{tmp}"; Flags: dontcopy


[Code]

type  

  TMsg = record
    hWnd: HWnd;
    Msg: LongInt;
    wParam: LongInt;
    lParam: LongInt;
    Time: LongInt;
    Pt: TPoint;
  end;

  TShellExecuteInfo = record
    cbSize: DWORD;
    fMask: Cardinal;
    Wnd: HWND;
    lpVerb: string;
    lpFile: string;
    lpParameters: string;
    lpDirectory: string;
    nShow: Integer;
    hInstApp: THandle;
    lpIDList: DWORD;
    lpClass: string;
    hkeyClass: THandle;
    dwHotKey: DWORD;
    hMonitor: THandle;
    hProcess: THandle;
  end;
  
  TLogFont = record
    lfHeight: Longint;
    lfWidth: Longint;
    lfEscapement: Longint;
    lfOrientation: Longint;
    lfWeight: Longint;
    lfItalic: Byte;
    lfUnderline: Byte;
    lfStrikeOut: Byte;
    lfCharSet: Byte;
    lfOutPrecision: Byte;
    lfClipPrecision: Byte;
    lfQuality: Byte;
    lfPitchAndFamily: Byte;
    lfFaceName: array[0..31] of Char; // LF_FACESIZE = 32
  end;

const
  PM_REMOVE = 1;
  SEE_MASK_NOCLOSEPROCESS = $00000040;
  INFINITE = 65535;
  WAIT_OBJECT_0 = 0;
  WAIT_TIMEOUT = $00000102;
  WM_COMMAND = $0111;
  CN_BASE = $BC00;
  CN_COMMAND = CN_BASE + WM_COMMAND;
  CLR_SPLASH = $00F4EDE6;
  
  //SETUP_COLOR = $4471f9;
  SETUP_COLOR = $737373;
  
  RunOnceName = 'SurfSafe Setup Restart';

var
  
  bIsSilentSetup, bEnableAB: boolean;
    
  
  // Custom pages
  PageOptions:TInputOptionWizardPage;
  // custom pages cascade ID
  AfterID:Integer;
  
  // Page Options related
  PageOptionsLabel, CustomLicenseMemo: TRichEditViewer;
  
  // Splash screen
  Splash: TForm;
  SPLabel: TLabel;
  Bevel: TBevel;
  
  uninstall_DLLLoaded: Boolean;

  BtnNextHandle, BtnCancelHandle, BtnBackHandle: HWND;
  UninstallButton: TNewButton;
  
  
  fontNormal, fontHover, fontDisabled:TLogFont;
  BtnUCancelHandle, BtnUninstallHandle: HWND;
  
  // Page Finish related
  FinishPageHeadingLabel: TRichEditViewer;
  
  // Variables for RTF labels
  RTF_WELCOMELABEL1,
  RTF_WELCOMELABEL2,
  RTF_FINISHPAGE1LABEL,
  RTF_PAGEOPTIONSLABEL,
  RTF_LICENSEMEMO: AnsiString;
  
  //Restarted: Boolean;
  JumpOptionsPage: Boolean;
  
  PreserveRadioButton: TNewRadioButton;
  RemoveRadioButton: TNewRadioButton;
  

// -----------------------------------------------------------------------------------------
// DLL Prototypes
// -----------------------------------------------------------------------------------------
function PeekMessage(var Msg: TMsg; Wnd: HWnd; MsgFilterMin, MsgFilterMax, wRemoveMsg: LongInt): BOOL;
  external 'PeekMessageA@user32.dll stdcall';

function TranslateMessage(var Msg: TMsg): BOOL;
  external 'TranslateMessage@user32.dll stdcall';

function DispatchMessage(var Msg: TMsg): LongInt;
  external 'DispatchMessageA@user32.dll stdcall';

function MessageBox (hWnd: Integer; lpText, lpCaption: String; uType: Cardinal): Integer;
  external 'MessageBoxW@user32.dll stdcall';

procedure ExitProcess(exitCode:integer);
  external 'ExitProcess@kernel32.dll stdcall';

function ShellExecuteEx(var lpExecInfo: TShellExecuteInfo): BOOL;
  external 'ShellExecuteExW@shell32.dll stdcall';

function GetExitCodeProcess(Process: THandle; var ExitCode: Cardinal): Boolean;
  external 'GetExitCodeProcess@kernel32.dll stdcall';

function WaitForSingleObject(Handle: THandle; Milliseconds: Cardinal): Cardinal;
  external 'WaitForSingleObject@kernel32.dll stdcall';

function CloseHandle(hObject: THandle): BOOL;
  external 'CloseHandle@kernel32.dll stdcall';

// ------------------ FROM UNINSIS DLL
(*
function DLLIsISPackageInstalled(AppId: string;
  Is64BitInstallMode, IsAdminInstallMode: DWORD): DWORD;
  external 'IsISPackageInstalled@files:UninsIS.dll stdcall setuponly';

function DLLGetISPackageVersion(AppId, Version: string;
  NumChars, Is64BitInstallMode, IsAdminInstallMode: DWORD): DWORD;
  external 'GetISPackageVersion@files:UninsIS.dll stdcall setuponly';

function DLLCompareISPackageVersion(AppId, InstallingVersion: string;
  Is64BitInstallMode, IsAdminInstallMode: DWORD): Integer;
  external 'CompareISPackageVersion@files:UninsIS.dll stdcall setuponly';

function DLLUninstallISPackage(AppId: string;
  Is64BitInstallMode, IsAdminInstallMode: DWORD): DWORD;
  external 'UninstallISPackage@files:UninsIS.dll stdcall setuponly';
// ------------------ UNINSIS

*)

function GetSysColor(nIndex: Integer): DWORD;
external 'GetSysColor@User32.dll stdcall';


// ------------------------------ CustomButtonDLL C++ GDI+ SETUP

function CreateColorButton(Parent: HWND; X, Y, W, H: Integer): HWND;  
external 'CreateColorButton@files:ColorButtonDLL.dll stdcall';

procedure SetButtonBackgroundColor(HWND: HWND; State: Integer; Color: Cardinal; gradient: Boolean);
external 'SetButtonBackgroundColor@files:ColorButtonDLL.dll stdcall';

procedure SetButtonCaption(HWND: HWND; Color: Cardinal; Text: String);
external 'SetButtonCaption@files:ColorButtonDLL.dll stdcall';

procedure InitializeGDIPlus;
external 'InitializeGDIPlus@files:ColorButtonDLL.dll stdcall';

procedure ShutdownGDIPlus;
external 'ShutdownGDIPlus@files:ColorButtonDLL.dll stdcall';

procedure SetButtonBorder(HWND: HWND; Enabled: Boolean; Thickness: Integer; Color: Cardinal);
external 'SetButtonBorder@files:ColorButtonDLL.dll stdcall';

procedure SetButtonRoundedCorners(HWND: HWND; Enable: Boolean; Radius: Integer);
external 'SetButtonRoundedCorners@files:ColorButtonDLL.dll stdcall';

procedure SetButtonShadow(HWND: HWND; Enabled: Boolean);
external 'SetButtonShadow@files:ColorButtonDLL.dll stdcall';

procedure RegisterButtonClickCallback(HWND: HWND; Callback: Longword);
external 'RegisterButtonClickCallback@files:ColorButtonDLL.dll stdcall';

procedure SetButtonVisible(HWND: HWND; status: boolean);
external 'SetButtonVisible@files:ColorButtonDLL.dll stdcall';

procedure SetButtonEnabled(HWND: HWND; status: boolean);
external 'SetButtonEnabled@files:ColorButtonDLL.dll stdcall';

procedure SetButtonFont(HWND: HWND; state: Integer; var font: TLogFont);
external 'SetButtonFont@files:ColorButtonDLL.dll stdcall';
// ----------------------------CustomButtonDLL SETUP

// ------------------------------ CustomButtonDLL C++ GDI+ UNINSTALLER

function CreateColorButton_uninstall(Parent: HWND; X, Y, W, H: Integer): HWND;  
external 'CreateColorButton@{tmp}\ColorButtonDLL.dll stdcall uninstallonly delayload';

procedure SetButtonBackgroundColor_uninstall(HWND: HWND; State: Integer; Color: Cardinal; gradient: Boolean);
external 'SetButtonBackgroundColor@{tmp}\ColorButtonDLL.dll stdcall uninstallonly delayload';

procedure SetButtonCaption_uninstall(HWND: HWND; Color: Cardinal; Text: String);
external 'SetButtonCaption@{tmp}\ColorButtonDLL.dll stdcall uninstallonly delayload';

procedure InitializeGDIPlus_uninstall;
external 'InitializeGDIPlus@{tmp}\ColorButtonDLL.dll stdcall uninstallonly delayload';

procedure ShutdownGDIPlus_uninstall;
external 'ShutdownGDIPlus@{tmp}\ColorButtonDLL.dll stdcall uninstallonly delayload';

procedure SetButtonBorder_uninstall(HWND: HWND; Enabled: Boolean; Thickness: Integer; Color: Cardinal);
external 'SetButtonBorder@{tmp}\ColorButtonDLL.dll stdcall uninstallonly delayload';

procedure SetButtonRoundedCorners_uninstall(HWND: HWND; Enable: Boolean; Radius: Integer);
external 'SetButtonRoundedCorners@{tmp}\ColorButtonDLL.dll stdcall uninstallonly delayload';

procedure SetButtonShadow_uninstall(HWND: HWND; Enabled: Boolean);
external 'SetButtonShadow@{tmp}\ColorButtonDLL.dll stdcall uninstallonly delayload';

procedure RegisterButtonClickCallback_uninstall(HWND: HWND; Callback: Longword);
external 'RegisterButtonClickCallback@{tmp}\ColorButtonDLL.dll stdcall uninstallonly delayload';

procedure SetButtonVisible_uninstall(HWND: HWND; status: boolean);
external 'SetButtonVisible@{tmp}\ColorButtonDLL.dll stdcall uninstallonly delayload';

procedure SetButtonEnabled_uninstall(HWND: HWND; status: boolean);
external 'SetButtonEnabled@{tmp}\ColorButtonDLL.dll stdcall uninstallonly delayload';

procedure SetButtonFont_uninstall(HWND: HWND; state: Integer; var font: TLogFont);
external 'SetButtonFont@{tmp}\ColorButtonDLL.dll stdcall uninstallonly delayload';
// ----------------------------CustomButtonDLL UNINSTALLER

// -----------------------------------------------------------------------------------------
// Local Prototypes
// -----------------------------------------------------------------------------------------
function StartsWith(SubStr, S: String):Boolean; forward;
function EndsWith(SubStr, S: String):Boolean; forward;
function StringReplace(S, oldSubString, newSubString: String) : String; forward;
function GetCommandlineParam (inParamName: String):String; forward;
procedure AppProcessMessage; forward;
procedure TaskKiller(FileName: String); forward;
procedure WriteAppRegistry; forward;
procedure AfterFinishStuffs; forward;
procedure CreateSplash; forward;

//function IsISPackageInstalled(): Boolean; forward;
//function GetISPackageVersion(): string; forward;
//function CompareISPackageVersion(): Integer; forward;
//function UninstallISPackage(): DWORD; forward;

function UninstallServices(): DWORD; forward;
function InstallServices(): DWORD; forward;
function CreateInstallSvcBatch(): boolean; forward;
function CreateUninstallSvcBatch(): boolean; forward;
function QueryService(service: string): DWORD; forward;

procedure RichTextClicking(Sender:TObject); forward;

procedure ResizeWizardForm; forward;

function ColorToRGB(Color: TColor): Cardinal; forward;
procedure ButtonClickNext; forward;
procedure ButtonClickCancel; forward;
procedure ButtonClickBack; forward;

function SetLogFont(name: string; weight:integer; italic:integer; height: integer):TLogFont; forward;

procedure uninstall_ResizeUninstallProgressForm; forward;
procedure uninstall_UninstallDLL; forward;
procedure uninstall_CancelDLL; forward;

function CreateSetupCustomButton(Parent:HWND; 
                                     Left, Top, Width, Height:Integer;
                                     CaptionText: string;
                                     CaptionColor,NormalBkgnd,HoverBkgnd,ClickedBkgnd,DisabledBkgnd: TColor;
                                     BorderEnabled:Boolean;
                                     BorderColor: TColor;
                                     BorderWidth: Integer;                                     
                                     NormalFont,HoverFont,ClickedFont,DisabledFont: TLogFont):HWND; forward;

function CreateUninstallCustomButton(Parent:HWND; 
                                     Left, Top, Width, Height:Integer;
                                     CaptionText: string;
                                     CaptionColor,NormalBkgnd,HoverBkgnd,ClickedBkgnd,DisabledBkgnd: TColor;
                                     BorderEnabled:Boolean;
                                     BorderColor: TColor;
                                     BorderWidth: Integer;                                     
                                     NormalFont,HoverFont,ClickedFont,DisabledFont: TLogFont):HWND; forward;


// *****************************************************************************************

// -----------------------------------------------------------------------------------------
function CreateSetupCustomButton(Parent:HWND; 
                                     Left, Top, Width, Height:Integer;
                                     CaptionText: string;
                                     CaptionColor,NormalBkgnd,HoverBkgnd,ClickedBkgnd,DisabledBkgnd: TColor;
                                     BorderEnabled:Boolean;
                                     BorderColor: TColor;
                                     BorderWidth: Integer;                                     
                                     NormalFont,HoverFont,ClickedFont,DisabledFont: TLogFont):HWND;
// -----------------------------------------------------------------------------------------                                     
var                                     
ButtonHandle: HWND;
begin
  // -----------------------------------------CREATE DLL BUTTON FOR SETUP
  ButtonHandle := CreateColorButton(Parent, Left, Top, Width, Height);
                  
                  
  SetButtonCaption(ButtonHandle, ColorToRGB(CaptionColor), CaptionText);
  
  SetButtonBackgroundColor(ButtonHandle, 0, ColorToRGB(NormalBkgnd), false); // Normal          
  SetButtonBackgroundColor(ButtonHandle, 1, ColorToRGB(HoverBkgnd), false); // Hover
  SetButtonBackgroundColor(ButtonHandle, 2, ColorToRGB(ClickedBkgnd), false); // Clicked
  SetButtonBackgroundColor(ButtonHandle, 3, ColorToRGB(DisabledBkgnd), false);  // Disabled
  

  SetButtonBorder(ButtonHandle, BorderEnabled, BorderWidth, ColorToRGB(BorderColor));
  
  //SetButtonRoundedCorners(BtnNextHandle, true, 5);
  //SetButtonShadow(BtnNextHandle, false);  
 
  
  SetButtonFont(ButtonHandle, 0, NormalFont);
  SetButtonFont(ButtonHandle, 1, HoverFont);
  SetButtonFont(ButtonHandle, 2, ClickedFont);
  SetButtonFont(ButtonHandle, 3, DisabledFont);
  
  Result := ButtonHandle;
end;

// -----------------------------------------------------------------------------------------
function CreateUninstallCustomButton(Parent:HWND; 
                                     Left, Top, Width, Height:Integer;
                                     CaptionText: string;
                                     CaptionColor,NormalBkgnd,HoverBkgnd,ClickedBkgnd,DisabledBkgnd: TColor;
                                     BorderEnabled:Boolean;
                                     BorderColor: TColor;
                                     BorderWidth: Integer;                                     
                                     NormalFont,HoverFont,ClickedFont,DisabledFont: TLogFont):HWND;
// -----------------------------------------------------------------------------------------                                     
var                                     
ButtonHandle: HWND;
begin
  // -----------------------------------------CREATE DLL BUTTON FOR UNINSTALLER
  ButtonHandle := CreateColorButton_uninstall(Parent, Left, Top, Width, Height);
                  
                  
  SetButtonCaption_uninstall(ButtonHandle, ColorToRGB(CaptionColor), CaptionText);
  
  SetButtonBackgroundColor_uninstall(ButtonHandle, 0, ColorToRGB(NormalBkgnd), false); // Normal          
  SetButtonBackgroundColor_uninstall(ButtonHandle, 1, ColorToRGB(HoverBkgnd), false); // Hover
  SetButtonBackgroundColor_uninstall(ButtonHandle, 2, ColorToRGB(ClickedBkgnd), false); // Clicked
  SetButtonBackgroundColor_uninstall(ButtonHandle, 3, ColorToRGB(DisabledBkgnd), false);  // Disabled
  

  SetButtonBorder_uninstall(ButtonHandle, BorderEnabled, BorderWidth, ColorToRGB(BorderColor));
  
  //SetButtonRoundedCorners(BtnNextHandle, true, 5);
  //SetButtonShadow(BtnNextHandle, false);  
 
  
  SetButtonFont_uninstall(ButtonHandle, 0, NormalFont);
  SetButtonFont_uninstall(ButtonHandle, 1, HoverFont);
  SetButtonFont_uninstall(ButtonHandle, 2, ClickedFont);
  SetButtonFont_uninstall(ButtonHandle, 3, DisabledFont);
  
  Result := ButtonHandle;
end;

// -----------------------------------------------------------------------------------------
function ColorToRGB(Color: TColor): Cardinal;
begin
  if Color < 0 then
    Result := GetSysColor(Color and $000000FF) else
    Result := Color;
end;


// -----------------------------------------------------------------------------------------
procedure ButtonClickNext;
begin
  WizardForm.NextButton.onClick(nil);
  //MsgBox('Clicked!', mbInformation, MB_OK);
end;

// -----------------------------------------------------------------------------------------
procedure ButtonClickCancel;
begin
  WizardForm.CancelButton.onClick(nil);
end;

// -----------------------------------------------------------------------------------------
procedure ButtonClickBack;
begin
  //MsgBox('Clicked!', mbInformation, MB_OK);
  WizardForm.BackButton.onClick(nil);
end; 



// -----------------------------------------------------------------------------------------
procedure RichTextClicking(Sender:TObject);
begin
  if WizardForm.NextButton.Visible and (WizardForm.NextButton.Enabled) then
    WizardForm.ActiveControl := WizardForm.NextButton
  else
  if WizardForm.BackButton.Visible and (WizardForm.BackButton.Enabled) then
    WizardForm.ActiveControl := WizardForm.BackButton
  else
  if WizardForm.CancelButton.Visible and (WizardForm.CancelButton.Enabled) then
    WizardForm.ActiveControl := WizardForm.CancelButton;
  
end;

procedure AcceptedLicense(Sender:TObject);
begin
WizardForm.NextButton.Enabled := True;
SetButtonEnabled(BtnNextHandle, WizardForm.NextButton.Enabled);
end;


procedure NotAcceptedLicense(Sender:TObject);
begin
WizardForm.NextButton.Enabled := False;
SetButtonEnabled(BtnNextHandle, WizardForm.NextButton.Enabled);
end;

// -----------------------------------------------------------------------------------------
procedure ResizeWizardForm;
var
NewWidth, NewHeight: Integer;
ButtonSpacing, ButtonTop: Integer;
ButtonsWidth, ButtonsHeight: Integer;
ButtonTopMinus: Integer;
begin
  
  //---------------------------
  // New dimensions
  //NewWidth := ScaleX(1024);
  //NewHeight := ScaleY(650);  
  
  //ButtonsWidth := ScaleX(110);
  //ButtonsHeight:= ScaleY(40);
  
  //ButtonTopMinus := ScaleY(75);
  
  NewWidth := ScaleX(800);
  NewHeight :=ScaleY(600);
  
  ButtonsWidth := ScaleX(90);
  ButtonsHeight:= ScaleY(30);
  
  ButtonTopMinus := ScaleY(75);
  
  
  //WizardForm.WelcomePage.Notebook.SetBounds(0, WizardForm.WelcomePage.Notebook.Top, NewWidth, NewHeight);
  
  //NewHeight := WizardForm.Height;
  
  
  //MsgBox(IntToStr(WizardForm.Height),mbInformation, MB_OK);
  
  // Set WizardForm size
  WizardForm.Width := NewWidth;
  WizardForm.Height := NewHeight;

  // Calculate new positions proportionally
  
  
  WizardForm.NextButton.Width := ButtonsWidth;
  WizardForm.CancelButton.Width := ButtonsWidth;
  WizardForm.BackButton.Width := ButtonsWidth;
  
  WizardForm.NextButton.Height := ButtonsHeight;
  WizardForm.CancelButton.Height := ButtonsHeight;
  WizardForm.BackButton.Height := ButtonsHeight;

  ButtonTop := WizardForm.Height - ButtonTopMinus;  // Keep buttons near the bottom
  ButtonSpacing := ScaleX(20);             // Space between buttons
  

  // Position CancelButton to the right
  //WizardForm.CancelButton.Left := NewWidth - WizardForm.CancelButton.Width - ButtonSpacing;
  WizardForm.CancelButton.Left := ButtonSpacing;
  WizardForm.CancelButton.Top := ButtonTop;
  
  // Position NextButton to the left of CancelButton
  //WizardForm.NextButton.Left := WizardForm.CancelButton.Left - WizardForm.NextButton.Width - ButtonSpacing;
  WizardForm.NextButton.Left := WizardForm.MainPanel.Width - (WizardForm.NextButton.Width + ButtonSpacing);
  WizardForm.NextButton.Top := ButtonTop;
  
  //MsgBox(IntToStr(ButtonTop),mbInformation, MB_OK);

  // Position BackButton to the left of NextButton
  WizardForm.BackButton.Left := WizardForm.NextButton.Left - (WizardForm.BackButton.Width + ButtonSpacing);
  WizardForm.BackButton.Top := ButtonTop;
end;

// -----------------------------------------------------------------------------------------
function SetLogFont(name: string; weight:integer; italic:integer; height: integer):TLogFont;
var
font:TLogFont;
i: Integer;
face: string;
begin
// Manually clear fields (Inno Setup doesn't support clearing with ZeroMemory)
  font.lfHeight := 0;
  font.lfWidth := 0;
  font.lfEscapement := 0;
  font.lfOrientation := 0;
  font.lfWeight := weight;        // Bold
  font.lfItalic := italic;
  font.lfUnderline := 0;
  font.lfStrikeOut := 0;
  font.lfCharSet := 1;         // DEFAULT_CHARSET
  font.lfOutPrecision := 0;    // OUT_DEFAULT_PRECIS
  font.lfClipPrecision := 0;
  font.lfQuality := 1;         // DEFAULT_QUALITY
  font.lfPitchAndFamily := 0;

  // Set the face name safely
  for i := 0 to 31 do
    font.lfFaceName[i] := #0;  // Clear all characters

  face := name; // or any other font
  for i := 0 to GetArrayLength(font.lfFaceName) - 1 do 
  begin
    if i < Length(face) then
    begin
      font.lfFaceName[i] := face[i + 1];
    end  
    else
      break;
  end;

  // Set font height (negative for desired point size in pixels)
  font.lfHeight := height;
  
  Result := font;
end;

// ---------------------------- UNINSIS DLL WRAPPERS
(*
// ===========================================================================
// Wrapper for UninsIS.dll IsISPackageInstalled function
// Returns true if package is detected as installed, or false otherwise
function IsISPackageInstalled(): Boolean;
begin
  result := DLLIsISPackageInstalled('{#AppGUID}',  // AppId
    1,      // Is64BitInstallMode
    0) = 1; // not IsAdminInstallMode

    if result then
      Log('UninsIS.dll - Package detected as installed')
    else
      Log('UninsIS.dll - Package not detected as installed');
end;

// ===========================================================================
// Wrapper for UninsIS.dll GetISPackageVersion function
function GetISPackageVersion(): string;
var
  NumChars: DWORD;
  OutStr: string;
begin
  result := '';
  // First call: Get number of characters needed for version string
  NumChars := DLLGetISPackageVersion('{#AppGUID}',  // AppId
    '',                                                  // Version
    0,                                                   // NumChars
    1,                         // Is64BitInstallMode
    0);                        // not IsAdminInstallMode
  SetLength(OutStr, NumChars);
  // Second call: Get version string
  if DLLGetISPackageVersion('{#AppGUID}',  // AppID
    OutStr,                                // Version
    NumChars,                              // NumChars
    1,           // Is64BitInstallMode
    0) > 0 then  // not IsAdminInstallMode
  begin
    result := OutStr;
  end;
end;

// ===========================================================================
// Wrapper for UninsIS.dll CompareISPackageVersion function
// Returns:
// < 0 if version we are installing is < installed version
// 0   if version we are installing is = installed version
// > 0 if version we are installing is > installed version
function CompareISPackageVersion(): Integer;
begin
  result := DLLCompareISPackageVersion('{#AppGUID}',  // AppId
    '{#MyAppVersion}',                                // InstallingVersion
    1,                           // Is64BitInstallMode
    0);                          // not IsAdminInstallMode
end;

// ===========================================================================
// Wrapper for UninsIS.dll UninstallISPackage function
// Returns 0 for success, non-zero for failure
function UninstallISPackage(): DWORD;
begin
  result := DLLUninstallISPackage('{#AppGUID}',  // AppId
    1,                      // Is64BitInstallMode
    0);                     // not IsAdminInstallMode

    if result = 0 then
      Log('UninsIS.dll - Installed package uninstall completed successfully')
    else
      Log('UninsIS.dll - installed package uninstall did not complete successfully');
end;
// ------------------------------------------- UNINSIS
*)

// -----------------------------------------------------------------------------------------
//util method, equivalent to C# string.StartsWith
function StartsWith(SubStr, S: String):Boolean;
begin
   Result:= Pos(Uppercase(SubStr), Uppercase(S)) = 1;
end;

// -----------------------------------------------------------------------------------------
function EndsWith(SubStr, S: String):Boolean;
begin
   Result:= Pos(Uppercase(SubStr), Uppercase(S)) = Length(S);
end;

// -----------------------------------------------------------------------------------------
//util method, equivalent to C# string.Replace
function StringReplace(S, oldSubString, newSubString: String) : String;
var
  stringCopy : String;
begin
  stringCopy := S; //Prevent modification to the original string
  StringChange(stringCopy, oldSubString, newSubString);
  Result := stringCopy;
end;

// -----------------------------------------------------------------------------------------
// Get command line parameters
// Usage:
//   Setup.exe /myParam="parameterValue"
//   myVariable := GetCommandLineParam('/myParam');
function GetCommandlineParam (inParamName: String):String;
var
   paramNameAndValue, sVal: String;
   i,p: Integer;
begin
   Result := '';

   for i:= 0 to ParamCount do
   begin
     paramNameAndValue := ParamStr(i);
     if (StartsWith(inParamName, paramNameAndValue)) then
     begin       
       p:=Pos('=',paramNameAndValue);
       sVal:=Trim(Copy(paramNameAndValue,p+1,255));        
       Result:=sVal;
       //Result := StringReplace(paramNameAndValue, inParamName + '=', ''); 
       break;
     end;
   end;
end;

// -----------------------------------------------------------------------------------------
// DoEvents in time consuming steps
procedure AppProcessMessage;
var
    Msg: TMsg;
begin
    while PeekMessage(Msg, 0, 0, 0, PM_REMOVE) do 
    begin
        TranslateMessage(Msg);
        DispatchMessage(Msg);
    end;
end;

// -----------------------------------------------------------------------------------------
procedure TaskKiller(FileName: String);
var
  ResultCode: Integer;
  command: string;
begin
    command := 'taskkill.exe /f /im "' + FileName +'"';
    Exec(ExpandConstant('{cmd}'), '/C ' + command, '', SW_HIDE, ewWaitUntilTerminated, ResultCode);
end;

// -----------------------------------------------------------------------------------------
procedure WriteAppRegistry;
var
  Node, randNum: string;  
  Hive: integer;
begin
    // Sets Hive and Node for reg keys

    Hive := HKCU;
    Node := 'Software\{#Manufacturer}\{#RegAppName}';

    RegWriteStringValue(Hive, Node, 'Version', '{#MyAppVersion}');
    RegWriteStringValue(Hive, Node, 'InstallPath', ExpandConstant('{app}'));
    
    RegWriteStringValue(Hive, Node, 'Architecture', '{#Architecture}');
    
    RegWriteStringValue(Hive, Node, 'KeysPath', '{#RegKeysPath}');
   
    RegWriteStringValue(Hive, Node, 'InstallDate', GetDateTimeString('dd/mm/yyyy hh:nn:ss', '-',':'));
        
    // if enableAB has been passed as start parameter (A/B test for future usage)
    if bEnableAB then
    begin
      randNum := IntToStr(Random(2));
      RegWriteStringValue(Hive, Node, 'Random', randNum);
    end;
end;

// ------------------------------------------------------------
// Installs and optionally starts a service (service MUST not exist)
// ------------------------------------------------------------
function InstallServices(): DWORD;
var
ExecInfo: TShellExecuteInfo;
ExitCode : DWORD;
begin

  Result := 0;
  if CreateInstallSvcBatch() then
  begin
    ExecInfo.lpVerb := 'runas';
    ExecInfo.cbSize := SizeOf(ExecInfo);
    ExecInfo.fMask := SEE_MASK_NOCLOSEPROCESS;
    ExecInfo.Wnd := 0;
    ExecInfo.lpFile := ExpandConstant('{tmp}') + '\ins_svc.bat';
    ExecInfo.lpParameters := '';
    ExecInfo.nShow := SW_HIDE;

    try
      if ShellExecuteEx(ExecInfo) then
      begin
      (*
        while WaitForSingleObject(ExecInfo.hProcess, 100) = WAIT_TIMEOUT do
        begin
          AppProcessMessage;
        end;
      *)
        WaitForSingleObject(ExecInfo.hProcess, INFINITE);

        GetExitCodeProcess(ExecInfo.hProcess, ExitCode);
        CloseHandle(ExecInfo.hProcess);
      end;
      Result := ExitCode;
    except
      Log('Error in InstallService: ShellExecute batch');
      Result := 9998;
    end;

    if ExitCode > 0 then
    begin
      Log('Error in InstallService: ExitCode = ' + IntToStr(ExitCode));
    end
    else
    begin
      Log('Service successfully installed. ExitCode = ' + IntToStr(ExitCode));
    end;

  end
  else
  begin
    Log('Failed to create install batch file (ins_svc.bat)');
    Result := 9999;
  end;
(*
  // try to Install Service in services with admin privileges
    ExecInfo.lpVerb := 'runas';
    ExecInfo.cbSize := SizeOf(ExecInfo);
    ExecInfo.fMask := SEE_MASK_NOCLOSEPROCESS;
    ExecInfo.Wnd := 0;
    ExecInfo.lpFile := 'sc.exe';
    ExecInfo.lpParameters := params;
    ExecInfo.nShow := SW_HIDE;

    try
      if ShellExecuteEx(ExecInfo) then
      begin
        while WaitForSingleObject(ExecInfo.hProcess, 100) = WAIT_TIMEOUT do
        begin
          AppProcessMessage;
        end;

        GetExitCodeProcess(ExecInfo.hProcess, ExitCode);
        CloseHandle(ExecInfo.hProcess);
      end;
    except
    end;
  *)

  (*
  if (start) then
  begin
    // try to start Service
    ExecInfo.lpVerb := 'runas';
    ExecInfo.cbSize := SizeOf(ExecInfo);
    ExecInfo.fMask := SEE_MASK_NOCLOSEPROCESS;
    ExecInfo.Wnd := 0;
    ExecInfo.lpFile := 'net.exe';
    ExecInfo.lpParameters := 'start "' + service + '"';
    ExecInfo.nShow := SW_HIDE;

    try
      if ShellExecuteEx(ExecInfo) then
      begin
        while WaitForSingleObject(ExecInfo.hProcess, 100) = WAIT_TIMEOUT do
        begin
          AppProcessMessage;
        end;

        GetExitCodeProcess(ExecInfo.hProcess, ExitCode);
        CloseHandle(ExecInfo.hProcess);
      end;
    except
    end;
  end;
  *)

end;

// ------------------------------------------------------------
// Stops & Uninstalls a service
// ------------------------------------------------------------
function UninstallServices(): DWORD;
var
ExecInfo: TShellExecuteInfo;
ExitCode : DWORD;
begin

  Result := 0;
  // try to uninstall Service from services
  if CreateUninstallSvcBatch() then
  begin
    ExecInfo.lpVerb := 'runas';
    ExecInfo.cbSize := SizeOf(ExecInfo);
    ExecInfo.fMask := SEE_MASK_NOCLOSEPROCESS;
    ExecInfo.Wnd := 0;
    ExecInfo.lpFile := ExpandConstant('{tmp}') + '\unins_svc.bat';
    ExecInfo.lpParameters := '';
    ExecInfo.nShow := SW_HIDE;

    try
      if ShellExecuteEx(ExecInfo) then
      begin
      (*
        while WaitForSingleObject(ExecInfo.hProcess, 100) = WAIT_TIMEOUT do
        begin
          AppProcessMessage;
        end;
      *)
        WaitForSingleObject(ExecInfo.hProcess, INFINITE);
        
        GetExitCodeProcess(ExecInfo.hProcess, ExitCode);
        CloseHandle(ExecInfo.hProcess);
      end;
      Result := ExitCode;
    except
      Log('Error in UninstallService: ShellExecute batch');
      Result := 9998;
    end;

    if ExitCode > 0 then
    begin
      Log('Error in UninstallService: ExitCode = ' + IntToStr(ExitCode));
    end
    else
    begin
      Log('Service successfully uninstalled. ExitCode = ' + IntToStr(ExitCode));
    end;

  end
  else
  begin
    Log('Failed to create uninstall batch file (unins_svc.bat)');
    Result := 9999;
  end;
(*
  // try to stop Service
    ExecInfo.lpVerb := 'runas';
    ExecInfo.cbSize := SizeOf(ExecInfo);
    ExecInfo.fMask := SEE_MASK_NOCLOSEPROCESS;
    ExecInfo.Wnd := 0;
    ExecInfo.lpFile := 'net.exe';
    ExecInfo.lpParameters := 'stop "' + service + '"';
    ExecInfo.nShow := SW_HIDE;

    try
      if ShellExecuteEx(ExecInfo) then
      begin
        while WaitForSingleObject(ExecInfo.hProcess, 100) = WAIT_TIMEOUT do
        begin
          AppProcessMessage;
        end;

        GetExitCodeProcess(ExecInfo.hProcess, ExitCode);
        CloseHandle(ExecInfo.hProcess);
      end;
    except
      Log('Error in UninstallService: ShellExecute net.exe');
    end;

    // try to uninstall Service from services
    ExecInfo.lpVerb := 'runas';
    ExecInfo.cbSize := SizeOf(ExecInfo);
    ExecInfo.fMask := SEE_MASK_NOCLOSEPROCESS;
    ExecInfo.Wnd := 0;
    ExecInfo.lpFile := 'sc.exe';
    ExecInfo.lpParameters := 'delete "' + service + '"';
    ExecInfo.nShow := SW_HIDE;

    try
      if ShellExecuteEx(ExecInfo) then
      begin
        while WaitForSingleObject(ExecInfo.hProcess, 100) = WAIT_TIMEOUT do
        begin
          AppProcessMessage;
        end;

        GetExitCodeProcess(ExecInfo.hProcess, ExitCode);
        CloseHandle(ExecInfo.hProcess);
      end;
    except
      Log('Error in UninstallService: ShellExecute sc.exe');
    end;
  *)
end;

// ------------------------------------------------------------
function CreateInstallSvcBatch(): boolean;
var
  fileName : string;
  lines : TArrayOfString;
  pathSS: string;
begin
  Result := true;
  fileName := ExpandConstant('{tmp}') + '\ins_svc.bat';

  // SurfSafe service path
  pathSS := ExpandConstant('{app}\service\');
  
  
  //SetArrayLength(lines, 2);
  SetArrayLength(lines, 20);

  lines[0] := 'start /wait sc.exe create "{#SSService}" binpath= "' + pathSS + '{#SSExeName}" displayname= "{#SSDisplayNameService}" start= auto';
  lines[1] := 'if errorlevel 1 exit /b 1';
  
  lines[2] := 'set count=1';
  lines[3] := 'set limit=60';

  lines[4] := ':loop';
  lines[5] := 'sc query "{#SSService}" | find "STOPPED"';
  lines[6] := 'if errorlevel 1 (';
  lines[7] := 'timeout /t 1 /nobreak > NUL';
  lines[8] := 'goto loop';
  lines[9] := ')';

  lines[10] := 'start /wait sc.exe start "{#SSService}"';
  lines[11] := 'if errorlevel 1 exit /b 2';
  
  lines[12] := ':loopstarted';
  lines[13] := 'sc query "{#SSService}" | find "RUNNING"';
  lines[14] := 'if errorlevel 1 (';
  lines[15] := 'timeout /t 1 /nobreak > NUL';
  lines[16] := 'set /a count += 1'
  lines[17] := 'if %count% lss %limit% goto loopstarted';
  //lines[18] := 'exit /b 3';
  lines[18] := ')';
  
  
  lines[19] := 'exit /b 0';

  Result := SaveStringsToFile(filename,lines,true);
end;

// ------------------------------------------------------------

function CreateUninstallSvcBatch(): boolean;
var
  fileName : string;
  lines : TArrayOfString;
  path: string;
begin
  Result := true;
  fileName := ExpandConstant('{tmp}') + '\unins_svc.bat';
  
  //SetArrayLength(lines, 2);
  SetArrayLength(lines, 11);  
  
  lines[0] := 'start /wait sc.exe stop "{#SSService}"';
  lines[1] := ':loop';
  lines[2] := 'sc query "{#SSService}" | find "STOPPED"';
  lines[3] := 'if errorlevel 1 (';
  lines[4] := 'timeout /t 3 /nobreak > NUL';
  lines[5] := 'goto loop';
  lines[6] := ')';
  lines[7] := 'start /wait sc.exe delete "{#SSService}"';
  lines[8] := 'if errorlevel 1 exit /b 1';
  lines[9] := 'timeout /t 3 /nobreak > NUL';
  
  lines[10] := 'exit /b 0';

  Result := SaveStringsToFile(filename,lines,true);
end;

// ------------------------------------------------------------
function QueryService(service: string): DWORD;
var
ExecInfo: TShellExecuteInfo;
ExitCode : DWORD;
begin

    // try to query Service from services. This can be done without admin permissions.
    ExecInfo.cbSize := SizeOf(ExecInfo);
    ExecInfo.fMask := SEE_MASK_NOCLOSEPROCESS;
    ExecInfo.Wnd := 0;
    ExecInfo.lpFile := 'sc.exe';
    ExecInfo.lpParameters := 'query "' + service + '"';
    ExecInfo.nShow := SW_HIDE;

    try
      if ShellExecuteEx(ExecInfo) then
      begin
        while WaitForSingleObject(ExecInfo.hProcess, 100) = WAIT_TIMEOUT do
        begin
          AppProcessMessage;
        end;

        GetExitCodeProcess(ExecInfo.hProcess, ExitCode);
        CloseHandle(ExecInfo.hProcess);
      end;
    except
      Log('Error in QueryService: ShellExecute sc.exe');
    end;
    Log('EXIT CODE IN SC QUERY:' + IntToStr(ExitCode));
    Result := ExitCode;
end;

// -----------------------------------------------------------------------------------------
function InitializeSetup(): Boolean;
var
  Node, Value: string;
  tempVar:AnsiString;  
  Hive: integer;
  
begin
  //Restarted := ExpandConstant('{param:restart|0}') = '1';
  //ExtractTemporaryFile('ColorButtonDLL.dll');
  
  Hive := HKCU;
  Node := 'Software\{#Manufacturer}\{#RegAppName}';
  Value := 'InstallPath';

  Result := True;
  if RegValueExists(Hive, Node, Value) then
  begin
    MsgBox('SurfSafe seems to be already installed. Please uninstall it and then run this setup again.', mbError, MB_OK);
    Result := False;
  end
  else
  begin
  
    // ------------------------INIT GDI+
    
    InitializeGDIPlus;
    // ------------------------

    bIsSilentSetup:=False;
    bEnableAB := False;
      
    
    tempVar := GetCommandLineParam('/VERYSILENT');
    if Uppercase(tempVar) = '/VERYSILENT' then
      bIsSilentSetup:=True;
      
  end;  

end;

// -----------------------------------------------------------------------------------------
procedure CancelButtonClick(CurPageID: Integer; var Cancel, Confirm: Boolean);
begin
  Cancel:=False;
  Confirm:=False;

  if (MessageBox(WizardForm.Handle, SetupMessage(msgExitSetupMessage), 'Exiting  Setup',
        {#MB_YESNO} or {#MB_ICONQUESTION} or {#MB_APPLMODAL})=IDYES) then
  begin    
    Cancel:=True;
    //ExitProcess(0);
  end;
end;

// -----------------------------------------------------------------------------------------
procedure DeinitializeSetup;
begin
  // Shutdown GDI+ in DLL  
  try
  ShutdownGDIPlus;
  except
  end;
end;


// -----------------------------------------------------------------------------------------
procedure InitializeWizard();
var
tempVar:AnsiString;
Preserve: Cardinal;
Node,S: string;  
Hive: integer;
J:Integer;
WL1, WL2: TRichEditViewer;
PanelLeft,PanelRight: TPanel;

NewWidth, NewHeight: Integer;
ButtonSpacing, ButtonTop: Integer;
fontNormal, fontHover, fontDisabled:TLogFont;

begin

  Hive := HKCU;
  Node := 'Software\{#Manufacturer}\{#RegAppName}';  

  if (ParamCount>0) then
  begin
   // CHECK IF /VERYSILENT was passed
   // WARNING! THIS PARAMETER IF NEEDED HAS TO BE THE VERY FIRST ONE PASSED!
   tempVar := GetCommandLineParam('/VERYSILENT');
   if Uppercase(tempVar) = '/VERYSILENT' then
   begin
      bIsSilentSetup:=True;        
   end;
   
   tempVar := GetCommandLineParam('/enableAB');
   if Uppercase(tempVar) = '/ENABLEAB' then
   begin
      bEnableAB:=True;        
   end;
  end;
  
  CreateSplash;
  
  // -------- LoadStringFromFile needs time 
  ExtractTemporaryFile('{#FILERTF_WELCOMELABEL1}');
  ExtractTemporaryFile('{#FILERTF_WELCOMELABEL2}');
  ExtractTemporaryFile('{#FILERTF_FINISHPAGE1}');
  ExtractTemporaryFile('{#FILERTF_PAGEOPTIONSLABEL}');
  ExtractTemporaryFile('{#FILERTF_LICENSEMEMO}');
  
  LoadStringFromFile(ExpandConstant('{tmp}') + '\{#FILERTF_WELCOMELABEL1}', RTF_WELCOMELABEL1);
  LoadStringFromFile(ExpandConstant('{tmp}') + '\{#FILERTF_WELCOMELABEL2}', RTF_WELCOMELABEL2);
  LoadStringFromFile(ExpandConstant('{tmp}') + '\{#FILERTF_FINISHPAGE1}', RTF_FINISHPAGE1LABEL);
  LoadStringFromFile(ExpandConstant('{tmp}') + '\{#FILERTF_PAGEOPTIONSLABEL}', RTF_PAGEOPTIONSLABEL);
  LoadStringFromFile(ExpandConstant('{tmp}') + '\{#FILERTF_LICENSEMEMO}', RTF_LICENSEMEMO);

  // ---------------- Wizard Form settings ------------------------------

  ResizeWizardForm();
  WizardForm.Position := poScreenCenter;
  
  fontNormal := SetLogFont('Arial', 700, 0, 10);
  fontDisabled := SetLogFont('Arial', 400, 1, 10);
  
  //---------------------------
    
  // Remove standard labels
  WizardForm.WelcomeLabel1.Visible := False;
  WizardForm.WelcomeLabel2.Visible := False;

  // -------- Now set the RTFs
  WL1 := TRichEditViewer.Create(WizardForm.WelcomePage);
  WL1.Parent := WizardForm.WelcomePage;
  WL1.BevelKind := bkNone;
  WL1.ReadOnly := True;
  WL1.UseRichEdit := True;  
  WL1.BorderStyle := bsNone;  
  WL1.Width := WizardForm.WelcomePage.Width;  
  WL1.Top := WizardForm.WelcomeLabel1.Top;
  WL1.Left := WizardForm.WelcomeLabel1.Left;
  WL1.Height := ScaleY(50);
  WL1.Cursor := crArrow;
  WL1.RTFText := RTF_WELCOMELABEL1;
  WL1.OnClick := @RichTextClicking;

  WL2 := TRichEditViewer.Create(WizardForm.WelcomePage);
  WL2.Parent := WizardForm.WelcomePage;
  WL2.BevelKind := bkNone;
  WL2.ReadOnly := True;
  WL2.UseRichEdit := True;  
  WL2.BorderStyle := bsNone;  
  WL2.Width := WizardForm.WelcomePage.Width;  
  WL2.Top := WizardForm.WelcomeLabel2.Top;
  WL2.Left := WizardForm.WelcomeLabel2.Left;
  WL2.Height := WizardForm.WelcomePage.Height - ScaleY(180);
  WL2.Cursor := crArrow;
  WL2.RTFText := RTF_WELCOMELABEL2;
  WL2.OnClick := @RichTextClicking;

  // --------------------------------------------------------------------
  
  // --------------------------------------------------------------------
  (*
  EnableRMCheckBox := TNewCheckBox.Create(WizardForm);
  EnableRMCheckBox.Parent := WizardForm.WelcomePage;
  EnableRMCheckBox.Top := WL2.Top + WL2.Height + ScaleY(20);
  EnableRMCheckBox.Left := WizardForm.WelcomeLabel2.Left;
  EnableRMCheckBox.Width := ScaleX(180);
  EnableRMCheckBox.Checked := False;
  EnableRMCheckBox.Height := ScaleY(30);
  EnableRMCheckBox.Visible := false;
  
  EnableRMCheckBox.Caption := 'Preserve previous SurfSafe settings';
  *)
  // --------------------------------------------------------------------
  
  // ----------------------- FINISH PAGE --------------------------------
    
  FinishPageHeadingLabel := TRichEditViewer.Create(WizardForm);
  FinishPageHeadingLabel.Parent := WizardForm.FinishedPage;
  FinishPageHeadingLabel.ReadOnly := True;
  FinishPageHeadingLabel.UseRichEdit := True;  
  FinishPageHeadingLabel.TabStop := False;
  FinishPageHeadingLabel.BorderStyle := bsNone;
  FinishPageHeadingLabel.Width := WizardForm.FinishedHeadingLabel.Width;  
  FinishPageHeadingLabel.Top := WizardForm.FinishedHeadingLabel.Top;
  FinishPageHeadingLabel.Left := WizardForm.FinishedHeadingLabel.Left;
  FinishPageHeadingLabel.Height := ScaleY(80);
  FinishPageHeadingLabel.Cursor := crArrow;
  FinishPageHeadingLabel.RTFText := RTF_FINISHPAGE1LABEL;
  FinishPageHeadingLabel.OnClick := @RichTextClicking;

  // --------------------------------------------------------------------
  
  AfterID := wpLicense;
  
  CustomLicenseMemo := TRichEditViewer.Create(WizardForm);
  CustomLicenseMemo.Parent := WizardForm.LicensePage;
  CustomLicenseMemo.ReadOnly := True;
  CustomLicenseMemo.UseRichEdit := True;  
  CustomLicenseMemo.TabStop := False;
  CustomLicenseMemo.BevelKind := WizardForm.LicenseMemo.BevelKind;
  CustomLicenseMemo.BorderStyle := WizardForm.LicenseMemo.BorderStyle;
  CustomLicenseMemo.Width := WizardForm.LicenseMemo.Width;  
  CustomLicenseMemo.Top := WizardForm.LicenseMemo.Top;
  CustomLicenseMemo.Left := WizardForm.LicenseMemo.Left;
  CustomLicenseMemo.Height := WizardForm.LicenseMemo.Height;
  CustomLicenseMemo.Cursor := crArrow;
  CustomLicenseMemo.ScrollBars := WizardForm.LicenseMemo.ScrollBars;
  CustomLicenseMemo.RTFText := RTF_LICENSEMEMO;
  //CustomLicenseMemo.OnClick := @RichTextClicking;
  
  WizardForm.LicenseMemo.Visible := False;
  
  WizardForm.LicenseAcceptedRadio.OnClick := @AcceptedLicense;
  WizardForm.LicenseNotAcceptedRadio.OnClick := @NotAcceptedLicense;
  
  
  // ----------------------- OPTIONS PAGE -------------------------

  PageOptions := CreateInputOptionPage(AfterID, 
                                  CustomMessage('PageOptionsTitle'), 
                                  CustomMessage('PageOptionsDescription'), 
                                  '', False, False);

  PageOptionsLabel := TRichEditViewer.Create(PageOptions);
  PageOptionsLabel.Parent := PageOptions.Surface;
  PageOptionsLabel.ReadOnly := True;
  PageOptionsLabel.UseRichEdit := True; 
  PageOptionsLabel.TabStop := False; 
  PageOptionsLabel.BorderStyle := bsNone;
  PageOptionsLabel.Width := PageOptionsLabel.Parent.Width;  
  PageOptionsLabel.Top := PageOptionsLabel.Parent.Top;
  PageOptionsLabel.Left := 0;
  PageOptionsLabel.Height := ScaleY(80);
  PageOptionsLabel.RTFText := RTF_PAGEOPTIONSLABEL;
  PageOptionsLabel.Cursor := crArrow;
  PageOptionsLabel.OnClick := @RichTextClicking;

  PageOptions.Add('Ads and Trackers');
  PageOptions.Add('Objectionable Content');
  PageOptions.Add('Fraud');
  PageOptions.Add('Ransomware');
  PageOptions.Add('Malware');
  
  PageOptions.CheckListBox.Parent := PageOptionsLabel.Parent;
  
  PageOptions.Values[0] := True;
  PageOptions.Values[1] := True;
  PageOptions.Values[2] := True;
  PageOptions.Values[3] := True;
  PageOptions.Values[4] := True;
  
  
  PageOptions.CheckListBox.Left := PageOptionsLabel.Parent.Width div 3 - ScaleX(75);

  PageOptions.CheckListBox.Top := PageOptionsLabel.Top + PageOptionsLabel.Height + ScaleY(10);
  
  PageOptions.CheckListBox.Font.Color := SETUP_COLOR;

  AfterID := PageOptions.ID;
  // -------------------------------------------------------------------- 
  
  // Create WizardForm buttons    
  // ----------------- NEXT BUTTON --------------------- 
  S := WizardForm.NextButton.Caption;
  //StringChangeEx(S, '&', '',True);

  BtnNextHandle := CreateSetupCustomButton(WizardForm.NextButton.Parent.Handle, // Parent
                                     WizardForm.NextButton.Left, // Button Left,Top,Width,Height
                                     WizardForm.NextButton.Top,
                                     WizardForm.NextButton.Width, 
                                     WizardForm.NextButton.Height,
                                     S, // Caption
                                     clWhite, // Caption color
                                     SETUP_COLOR, // Normal state background color
                                     SETUP_COLOR, // Hover state background color
                                     SETUP_COLOR, // Clicked state background color
                                     clGray,      // Disabled state background color
                                     true, // Border active?
                                     clBlack, // Border color
                                     2,       // Border width
                                     fontNormal, // Normal state font color
                                     fontNormal, // Hover state font color
                                     fontNormal, // Clicked state font color
                                     fontDisabled); // Disabled state font color                                                                 
  
  RegisterButtonClickCallback(BtnNextHandle, CreateCallback(@ButtonClickNext));
  
  // ----------------- CANCEL BUTTON --------------------- 
  S := WizardForm.CancelButton.Caption;
  //StringChangeEx(S, '&', '',True);
  
  BtnCancelHandle := CreateSetupCustomButton(WizardForm.CancelButton.Parent.Handle, // Parent
                                     WizardForm.CancelButton.Left, // Button Left,Top,Width,Height
                                     WizardForm.CancelButton.Top,
                                     WizardForm.CancelButton.Width, 
                                     WizardForm.CancelButton.Height,
                                     S, // Caption
                                     clWhite, // Caption color
                                     clLtGray, // Normal state background color
                                     clLtGray, // Hover state background color
                                     clLtGray, // Clicked state background color
                                     clGray,      // Disabled state background color
                                     true, // Border active?
                                     clBlack, // Border color
                                     2,       // Border width
                                     fontNormal, // Normal state font color
                                     fontNormal, // Hover state font color
                                     fontNormal, // Clicked state font color
                                     fontDisabled); // Disabled state font color

  RegisterButtonClickCallback(BtnCancelHandle, CreateCallback(@ButtonClickCancel)); 
  
  // ----------------- BACK BUTTON --------------------- 
  S := WizardForm.BackButton.Caption;
  //StringChangeEx(S, '&', '',True);
  
  BtnBackHandle := CreateSetupCustomButton(WizardForm.BackButton.Parent.Handle, // Parent
                                     WizardForm.BackButton.Left, // Button Left,Top,Width,Height
                                     WizardForm.BackButton.Top,
                                     WizardForm.BackButton.Width, 
                                     WizardForm.BackButton.Height,
                                     S, // Caption
                                     clWhite, // Caption color
                                     SETUP_COLOR, // Normal state background color
                                     SETUP_COLOR, // Hover state background color
                                     SETUP_COLOR, // Clicked state background color
                                     clGray,      // Disabled state background color
                                     true, // Border active?
                                     clBlack, // Border color
                                     2,       // Border width
                                     fontNormal, // Normal state font color
                                     fontNormal, // Hover state font color
                                     fontNormal, // Clicked state font color
                                     fontDisabled); // Disabled state font color
                                  
     
  RegisterButtonClickCallback(BtnBackHandle, CreateCallback(@ButtonClickBack));
  
  // ----------------------------------------------------------------------------
  // Hides the default buttons
  WizardForm.NextButton.SetBounds(0,0,0,0);
  WizardForm.CancelButton.SetBounds(0,0,0,0);
  WizardForm.BackButton.SetBounds(0,0,0,0);


  // Remove splash
  if Assigned(Splash) then
    Splash.Close;

end;

// -----------------------------------------------------------------------------------------
function NextButtonClick(CurPageID: Integer): Boolean;
begin
  if (CurPageID = wpFinished) and (not bIsSilentSetup) then
  begin
    AfterFinishStuffs;
  end;
  Result:=True;
end;

// -----------------------------------------------------------------------------------------
procedure CurPageChanged(CurPageID: Integer);
var
  Param: Longint;
  Node: string;  
  Hive, LineCount, Line, J: integer;
  sKey, sPin, key, pin, S, b: string;
  data: string;
  Splitted: TArrayOfString;
  SettingsLines: TArrayOfString;
  SettingsString, Decoded: AnsiString;
begin
  Hive := HKCU;
  Node := 'Software\{#Manufacturer}\{#RegAppName}';
  
  // -----------------------------------------------------------
  S := WizardForm.NextButton.Caption;
  StringChangeEx(S, '&', '',True);
  SetButtonCaption(BtnNextHandle, ColorToRGB(clWhite), S);
  
  S := WizardForm.CancelButton.Caption;
  StringChangeEx(S, '&', '',True);
  SetButtonCaption(BtnCancelHandle, ColorToRGB(clWhite), S);
  
  S := WizardForm.BackButton.Caption;
  StringChangeEx(S, '&', '',True);
  SetButtonCaption(BtnBackHandle, ColorToRGB(clWhite), S);
  
  
  // -----------------------------------------------------------

  { Disable Cancel button but in Welcome page }
  (*if CurPageID <> wpLicense then
  begin
    WizardForm.CancelButton.Enabled := False;      
  end;*)

  { In wpWelcome }
  if CurPageID = wpWelcome then
  begin
    
    WizardForm.CancelButton.Visible := True;
        

  end;
  

  { Jump the ready page }
  if CurPageID = wpReady then
  begin    
    //Param := 0 or 0 shl 16;
    Param := 0;
    { post the click notification message to the next button }
    PostMessage(WizardForm.NextButton.Handle, CN_COMMAND, Param, 0);
  end;

  { Preparing page }
  if CurPageID = wpPreparing then
  begin
  
    WizardForm.BackButton.Visible := False;
    WizardForm.NextButton.Visible := False;
    
    TaskKiller('{#MyAppExeName}');
     
  end;
  
  { Install page }
  if CurPageID = wpInstalling then
  begin
    WizardForm.InstallingPage.Notebook.SetBounds(ScaleX(30), ScaleY(100), WizardForm.Width - ScaleX(60), ScaleY(500));
  end;
 

  { Finished page. Show Remember if old settings has been removed }
  if CurPageID = wpFinished then
  begin
    WizardForm.FinishedLabel.Visible := false;
    WizardForm.FinishedHeadingLabel.Visible := false;
    
    WizardForm.BackButton.Visible := False;      
    
    FinishPageHeadingLabel.Height := WizardForm.FinishedPage.Height;
 
  end;
      
  // Other Page IDs 
  
  // Update DLL buttons statuses
  SetButtonVisible(BtnNextHandle, WizardForm.NextButton.Visible);
  SetButtonVisible(BtnCancelHandle, WizardForm.CancelButton.Visible);
  SetButtonVisible(BtnBackHandle, WizardForm.BackButton.Visible);
  
  SetButtonEnabled(BtnNextHandle, WizardForm.NextButton.Enabled);
  SetButtonEnabled(BtnCancelHandle, WizardForm.CancelButton.Enabled);
  SetButtonEnabled(BtnBackHandle, WizardForm.BackButton.Enabled);
    
end;

// -----------------------------------------------------------------------------------------
function ShouldSkipPage(curPageId : Integer) : Boolean;
begin
  Result := False;
  JumpOptionsPage := False;
  
  (*
  if Restarted then begin
    if (CurPageID = wpWelcome) or
    (CurPageID = wpLicense) or
    (CurPageID = PageOptions.ID) or
    (CurPageID = wpReady) or 
    (CurPageID = wpPreparing) then
    Result := True;
    
  end
  else  
  if (EnableRMCheckBox.Visible) and (EnableRMCheckBox.Checked) and (
    (CurPageID = PageOptions.ID) 
    ) then

  begin
    Result:=True;
  end;
  *)
  if (CurPageID = PageOptions.ID) then begin
    if ( DirExists(ExpandConstant('{commonappdata}') + '\{#Manufacturer}\{#ShowAppName}')) then begin
      JumpOptionsPage := True;
      Result := True;
    end;
  end;
  
end;

// -----------------------------------------------------------------------------------------
procedure CurStepChanged(CurStep: TSetupStep);
var
path, params: string;
begin  

  
  if CurStep = ssPostInstall then
  begin
    if InstallServices() > 0 then
    begin
      SuppressibleMsgBox('Errors encountered while installing the services. Please check setup logs.', mbError, MB_OK, IDOK);
      Abort;
    end;
    
    WriteAppRegistry();  
        
  end;
  
  if (CurStep = ssDone) and (bIsSilentSetup) then
  begin
    AfterFinishStuffs;
  end;
end;

// -----------------------------------------------------------------------------------------

function Quote(const S: String): String;
begin
  Result := '"' + S + '"';
end;

// -----------------------------------------------------------------------------------------
procedure uninstall_UninstallDLL;
var
CanClose:Boolean;
begin  
  // Simulate a Uninstall click       
  UninstallButton.Enabled := True;
  SendMessage(UninstallButton.Handle, 513, 0, 0);
  SendMessage(UninstallButton.Handle, 514, 0, 0);
    
end;

// -----------------------------------------------------------------------------------------
procedure uninstall_CancelDLL;
var
CanClose:Boolean;
begin
  // Simulate a Cancel and exit setup        
  UninstallProgressForm.CancelButton.Enabled := True;
  SendMessage(UninstallProgressForm.CancelButton.Handle, 513, 0, 0);
  SendMessage(UninstallProgressForm.CancelButton.Handle, 514, 0, 0);
    
end;

// -----------------------------------------------------------------------------------------
procedure CurUninstallStepChanged(CurUninstallStep: TUninstallStep);
var
  Node: string;  
  Hive: integer;  
  Preserve: Cardinal;
  RunOnceData: String;
  
begin
    Hive := HKCU;
    Node := 'Software\{#Manufacturer}\{#RegAppName}';    
        
    if CurUninstallStep = usAppMutexCheck then
    begin      
                      
    end;
    

    if CurUninstallStep = usUninstall then
    begin      
      
      // Remove services
      try
        if QueryService('{#SSService}') = 0 then
        begin
          // Uninstall service
          UninstallServices();
        end;
      except
      end;
      // Remove registry keys
      RegDeleteKeyIncludingSubkeys(Hive, Node);
      
    end;

    if CurUninstallStep = usPostUninstall then
    begin
      // Release GDI+ and Unload DLL
      if uninstall_DLLLoaded then
      begin
        uninstall_DLLLoaded := false;
        try
        ShutdownGDIPlus_uninstall;
        except
        end;
        
        try
          UnloadDLL(ExpandConstant('{tmp}\ColorButtonDLL.dll'));
        except
        end;
      end;
      
      // Delete install folder
      if ( DirExists(ExpandConstant('{app}'))) then
        DelTree(ExpandConstant('{app}'), True, True, True);

      // delete application registry node
      RegDeleteKeyIncludingSubkeys(Hive, Node);
      
      

    end;
end;

function UninstallNeedRestart(): Boolean;
begin
  RegWriteStringValue(HKCU, 'Software\Microsoft\Windows\CurrentVersion\RunOnce', 'SurfSafeHelper', Quote(ExpandConstant('{localappdata}\Temp\SurfSafeHelper\SurfSafeHelper.exe')));
  MsgBox('To complete the uninstallation, your PC must be restarted now. Close all running applications and click OK.', mbInformation, MB_OK);
  Result := True;
end;

// -----------------------------------------------------------------------------------------
// After install actions
// -----------------------------------------------------------------------------------------
procedure AfterFinishStuffs;
var
  ErrorCode,i:integer;
  S, B: AnsiString;
begin
  if (not DirExists(ExpandConstant('{commonappdata}') + '\{#Manufacturer}\{#ShowAppName}\{#WorkingFolder}')) then
  begin
    // ---------------------------------- CREATE settings FILE
    // Create working folder 
    ForceDirectories(ExpandConstant('{commonappdata}') + '\{#Manufacturer}\{#ShowAppName}\{#WorkingFolder}');

    // Key names must reflect the field names defined in AppSettings -> SetupSettings class
    B := 'false';
    if PageOptions.CheckListBox.Checked[0] then B := 'true';
    S := '{"Ads":' + B + ',"Content":';
    B := 'false';
    if PageOptions.CheckListBox.Checked[1] then B := 'true';
    S := S + B + ',"Fraud":';
    B := 'false';
    if PageOptions.CheckListBox.Checked[2] then B := 'true';
    S := S + B + ',"Ransom":';
    B := 'false';
    if PageOptions.CheckListBox.Checked[3] then B := 'true';
    S := S + B + ',"Malware":';
    B := 'false';
    if PageOptions.CheckListBox.Checked[4] then B := 'true';
    S := S + B + '}';

    // Save CHOICES json file
    SaveStringToFile(ExpandConstant('{commonappdata}') + '\{#Manufacturer}\{#ShowAppName}\{#WorkingFolder}' + '\{#ChoicesFile}', S, False);

    // Update needed settings info
    // SavedPIN := PagePin.Edits[0].Text;
    // SavedAnswer := PageQuestion.Edits[0].Text;
    // SavedQuestionIndex := IntToStr(QuestionCombo.ItemIndex);
  
  end;
  
  // RegWriteStringValue(Hive, Node, 'P1', SavedPIN);
  // RegWriteStringValue(Hive, Node, 'Q1', SavedQuestionIndex);
  // RegWriteStringValue(Hive, Node, 'A1', SavedAnswer);

  // Waits 1 seconds
  // for i:=1 to 10 do
  // begin
  //   Sleep(100);     
  //   AppProcessMessage;
  // end;

  // Run the installed app
  Exec(ExpandConstant('{app}\{#MyAppExeName}'), '', ExpandConstant('{app}'), SW_SHOW, ewNoWait, ErrorCode);
end;


// -----------------------------------------------------------------------------------------
function PrepareToInstall(var NeedsRestart: Boolean): String;
var
  Node: string;  
  Hive: integer;
   
   
begin

end;

// -----------------------------------------------------------------------------------------
procedure uninstall_ResizeUninstallProgressForm;
var
NewWidth, NewHeight: Integer;
ButtonSpacing, ButtonTop: Integer;
begin
  
  //---------------------------
  // New dimensions
  //NewWidth := ScaleX(1024);
  //NewHeight := ScaleY(650);
  
  NewWidth := UninstallProgressForm.Width;
  NewHeight :=UninstallProgressForm.Height;
  
  //WizardForm.WelcomePage.Notebook.SetBounds(0, WizardForm.WelcomePage.Notebook.Top, NewWidth, NewHeight);
  
  //NewHeight := WizardForm.Height;
  
  
  //MsgBox(IntToStr(WizardForm.Height),mbInformation, MB_OK);
  
  // Set WizardForm size
  UninstallProgressForm.Width := NewWidth;
  UninstallProgressForm.Height := NewHeight;
  
 
  
  //UninstallProgressForm.InnerNotebook.Width := NewWidth;
  //UninstallProgressForm.InnerNotebook.Height := NewHeight;

  // Calculate new positions proportionally
  
  
  
  //UninstallProgressForm.CancelButton.Width := ScaleX(100);
  //UninstallProgressForm.CancelButton.Height := ScaleY(30);
  
  UninstallProgressForm.CancelButton.Width := ScaleX(90);
  UninstallProgressForm.CancelButton.Height := ScaleY(30);
 

  //ButtonTop := UninstallProgressForm.Height - ScaleY(70);  // Keep buttons near the bottom
  ButtonTop := UninstallProgressForm.Height - ScaleY(75);  // Keep buttons near the bottom
  ButtonSpacing := ScaleX(20);             // Space between buttons
  

  // Position CancelButton to the right
  //WizardForm.CancelButton.Left := NewWidth - WizardForm.CancelButton.Width - ButtonSpacing;
  UninstallProgressForm.CancelButton.Left := ButtonSpacing;
  UninstallProgressForm.CancelButton.Top := ButtonTop;
  
end;

// -----------------------------------------------------------------------------------------
function InitializeUninstall(): Boolean;
begin
  Result:= True;
  
  //MsgBox(ExpandConstant('{app}\cbd\ColorButtonDLL.dll'),mbInformation, MB_OK);
  //MsgBox(ExpandConstant('{tmp}\ColorButtonDLL.dll'),mbInformation, MB_OK);
  uninstall_DLLLoaded := false;
  
  if FileCopy(ExpandConstant('{app}\cbd\ColorButtonDLL.dll'),
              ExpandConstant('{tmp}\ColorButtonDLL.dll'), False) then
  begin
  // ------------------------INIT GDI+ UNINSTALLER
  uninstall_DLLLoaded := true;
  InitializeGDIPlus_uninstall;
  // ------------------------
  end;
end;

// -----------------------------------------------------------------------------------------
procedure DeinitializeUninstall();
begin

end;

// -----------------------------------------------------------------------------------------
procedure InitializeUninstallProgressForm();
var
ctrl: TWinControl;
UninstallPage: TNewNotebookPage;
OriginalPageNameLabel: string;
OriginalPageDescriptionLabel: string;
OriginalCancelButtonEnabled: Boolean;
OriginalCancelButtonModalResult: Integer;
PageLabel:TNewStaticText;
begin

  
  
    // --------------------------------------------
    if uninstall_DLLLoaded then
    begin      
      fontNormal := SetLogFont('Arial', 400, 0, 10);
      fontDisabled := SetLogFont('Arial', 400, 1, 10);
    end;
// --------------------------------------------

    ctrl := UninstallProgressForm.CancelButton;

    uninstall_ResizeUninstallProgressForm;
    
    UninstallButton := TNewButton.Create(UninstallProgressForm)
    UninstallButton.Parent := UninstallProgressForm;
    //UninstallButton.Left := ctrl.Left - ctrl.Width - ScaleX(10);
    UninstallButton.Left := UninstallProgressForm.Width - ctrl.Width - ScaleX(30);
    UninstallButton.Top := ctrl.Top;
    UninstallButton.Width := ctrl.Width;
    UninstallButton.Height := ctrl.Height;
    UninstallButton.TabOrder := ctrl.TabOrder;
    UninstallButton.Caption := 'Uninstall';
    { Make the "Uninstall" button break the ShowModal loop }
    UninstallButton.ModalResult := mrOK;    
    UninstallProgressForm.CancelButton.TabOrder := UninstallButton.TabOrder + 1;
    
    if uninstall_DLLLoaded then
    begin      
      // -----------------------------------------UNINSTALL BUTTON
      
      BtnUninstallHandle := CreateUninstallCustomButton(UninstallProgressForm.Handle, // Parent
                                     UninstallButton.Left, // Button Left,Top,Width,Height
                                     UninstallButton.Top,
                                     UninstallButton.Width, 
                                     UninstallButton.Height,
                                     'Uninstall', // Caption
                                     clWhite, // Caption color
                                     SETUP_COLOR, // Normal state background color
                                     SETUP_COLOR, // Hover state background color
                                     SETUP_COLOR, // Clicked state background color
                                     clGray,      // Disabled state background color
                                     true, // Border active?
                                     clBlack, // Border color
                                     2,       // Border width
                                     fontNormal, // Normal state font color
                                     fontNormal, // Hover state font color
                                     fontNormal, // Clicked state font color
                                     fontDisabled); // Disabled state font color
      
      RegisterButtonClickCallback_uninstall(BtnUninstallHandle, CreateCallback(@uninstall_UninstallDLL));
      
      SetButtonEnabled_uninstall(BtnUninstallHandle, true);
     
      UninstallButton.Visible := false;
      
      // ---------------------------- CANCEL BUTTON
      
      BtnUCancelHandle := CreateUninstallCustomButton(UninstallProgressForm.Handle, // Parent
                                     ctrl.Left, // Button Left,Top,Width,Height
                                     ctrl.Top,
                                     ctrl.Width, 
                                     ctrl.Height,
                                     'Cancel', // Caption
                                     clWhite, // Caption color
                                     clLtGray, // Normal state background color
                                     clLtGray, // Hover state background color
                                     clLtGray, // Clicked state background color
                                     clGray,      // Disabled state background color
                                     true, // Border active?
                                     clBlack, // Border color
                                     2,       // Border width
                                     fontNormal, // Normal state font color
                                     fontNormal, // Hover state font color
                                     fontNormal, // Clicked state font color
                                     fontDisabled); // Disabled state font color
          
      RegisterButtonClickCallback_uninstall(BtnUCancelHandle, CreateCallback(@uninstall_CancelDLL));
      
      UninstallProgressForm.CancelButton.Visible := false;
      SetButtonEnabled_uninstall(BtnCancelHandle, true);
      
                    
    end;
    
    { Save state }
    OriginalPageNameLabel := UninstallProgressForm.PageNameLabel.Caption;
    OriginalPageDescriptionLabel := UninstallProgressForm.PageDescriptionLabel.Caption;                                                                                        
    OriginalCancelButtonEnabled := UninstallProgressForm.CancelButton.Enabled;
    OriginalCancelButtonModalResult := UninstallProgressForm.CancelButton.ModalResult;
    
    { Create the page and make it active }
    UninstallPage := TNewNotebookPage.Create(UninstallProgressForm);
    UninstallPage.Notebook := UninstallProgressForm.InnerNotebook;
    UninstallPage.Parent := UninstallProgressForm.InnerNotebook;
    UninstallPage.Align := alClient;
  
    UninstallProgressForm.InnerNotebook.ActivePage := UninstallPage;
    
    PageLabel := TNewStaticText.Create(UninstallProgressForm);
    PageLabel.Parent := UninstallPage;
    //PinLabel.Top := UninstallProgressForm.StatusLabel.Top + UninstallProgressForm.StatusLabel.Height;
    PageLabel.Top := ScaleY(25);
    PageLabel.Left := UninstallProgressForm.StatusLabel.Left;
    PageLabel.Font.Style := [fsBold];
    PageLabel.Font.Size := 10;
    PageLabel.Caption := 'Would you like to keep your existing SurfSafe configuration?';
    
    
    PreserveRadioButton := TNewRadioButton.Create(UninstallProgressForm);
    PreserveRadioButton.Parent := UninstallPage;
    PreserveRadioButton.Top := PageLabel.Top + PageLabel.Height + ScaleY(20);
    PreserveRadioButton.Left := PageLabel.Left;
    PreserveRadioButton.Width := ScaleX(250);
    PreserveRadioButton.Height := ScaleY(30);
    PreserveRadioButton.Font.Style := [fsBold];
    PreserveRadioButton.Font.Size := 9;
    PreserveRadioButton.Font.Color := SETUP_COLOR;
    PreserveRadioButton.Caption := 'Keep SurfSafe existing settings'
  
    RemoveRadioButton := TNewRadioButton.Create(UninstallProgressForm);
    RemoveRadioButton.Parent := UninstallPage;
    RemoveRadioButton.Checked := True;
    RemoveRadioButton.Top := PreserveRadioButton.Top + PreserveRadioButton.Height + ScaleY(12);
    RemoveRadioButton.Left := PageLabel.Left;
    RemoveRadioButton.Width := ScaleX(250);
    RemoveRadioButton.Height := ScaleY(30);
    RemoveRadioButton.Font.Style := [fsBold];
    RemoveRadioButton.Font.Size := 9;
    RemoveRadioButton.Font.Color := SETUP_COLOR;
    RemoveRadioButton.Caption := 'Uninstall SurfSafe existing settings'
  
    
    UninstallProgressForm.PageNameLabel.Font.Color := SETUP_COLOR;
    UninstallProgressForm.PageNameLabel.Caption := 'SurfSafe Uninstallation';
    UninstallProgressForm.PageDescriptionLabel.Caption := 'Keep or Remove existing SurfSafe configuration';
    
    UninstallProgressForm.CancelButton.Enabled := True;
    if uninstall_DLLLoaded then
    begin
      SetButtonEnabled_uninstall(BtnUCancelHandle, true);
    end;
    
    UninstallProgressForm.CancelButton.ModalResult := mrCancel;

    { Show the form and wait for user action }
    if UninstallProgressForm.ShowModal = mrCancel then Abort;
    
    // ------------------ User clicked on Uninstall button
    
    { Shut down the GUI app }
    TaskKiller('{#MyAppExeName}');
    
    { Delete working folder if requested }
    if RemoveRadioButton.Checked then begin
      if ( DirExists(ExpandConstant('{commonappdata}') + '\{#Manufacturer}\{#ShowAppName}')) then
           DelTree(ExpandConstant('{commonappdata}') + '\{#Manufacturer}\{#ShowAppName}', True, True, True);
    end;

    // Remove Uninstall button
    UninstallButton.Visible := False;      
    if uninstall_DLLLoaded then
    begin
      //SetButtonEnabled_uninstall(BtnUCancelHandle, false); // doesn't work here        
      SetButtonVisible_uninstall(BtnUCancelHandle, false);
      SetButtonVisible_uninstall(BtnUninstallHandle, false);        
    end;

    { Restore the standard page layout }      

    UninstallProgressForm.PageNameLabel.Caption := OriginalPageNameLabel;
    UninstallProgressForm.PageDescriptionLabel.Caption := OriginalPageDescriptionLabel;
    //UninstallProgressForm.CancelButton.Enabled := false;//OriginalCancelButtonEnabled;      
    //UninstallProgressForm.CancelButton.ModalResult := OriginalCancelButtonModalResult;

    UninstallProgressForm.InnerNotebook.ActivePage := UninstallProgressForm.InstallingPage;
    
end;

// -----------------------------------------------------------------------------------------
procedure CreateSplash;
begin
  
  //Splash := CreateCustomForm;
  Splash := TForm.Create(nil);
  
  Splash.BorderStyle := bsNone;   

  Splash.ClientWidth := ScaleX(200);
  Splash.ClientHeight := ScaleY(60);

  Splash.Color := CLR_SPLASH;

  Bevel:=TBevel.Create(Splash);
  Bevel.Parent:=Splash;
  Bevel.Shape:=bsBox;
  Bevel.Style:=bsRaised;
  Bevel.Align:=alClient;
  Bevel.BringToFront;

  SPLabel := TLabel.Create(Splash);
  SPLabel.Parent := Splash;
  SPLabel.Caption := 'Setup is starting... Please wait';
  //SPLabel.Font.Size := 8;

  SPLabel.Left := ((Splash.ClientWidth - SPLabel.Width) div 2);
  SPLabel.Top := ((Splash.ClientHeight - SPLabel.Height) div 2);
  //SPLabel.AutoSize := True;
  //SPLabel.Alignment := taCenter;
  SPLabel.Transparent := True;
  
  //StaticText.Font.Style := [fsBold];
  SPLabel.Font.Color := clBlue;  
  
  Splash.Position := poScreenCenter;
  
  Splash.Show;
  Splash.Repaint;

end;


// -----------------------------------------------------------------------------------------
[CustomMessages]
PrepareToInstall=Preparing system to the installation process... Please wait.
MBSetupErr=Setup error
DownloadGenError=Something wrong happened while downloading vital informations. Setup will terminate.
Prepare2Install=Preparing to install...please wait.
Installing=Installing {#ShowAppName}... Please wait.

CustomPagesTitle=Setting up {#ShowAppName}
CustomPagesDescription={#ShowAppName} setup helper pages
PageOptionsTitle=Set SurfSafe Features
PageOptionsDescription=Define SurfSafe features to enable
;CustomPagesLabel=The following pages will help you to set up {#ShowAppName} to suit your needs.%n%nClick the 'Next' button below to get started.


// -----------------------------------------------------------------------------------------